pipeline {
    agent any

    environment {
        VERSION = env.GIT_COMMIT.take(7)
        DOCKERFILE  = "library-api/Dockerfile"
        GITREPO     = ""
        CONTEXT     = "pwd"
        REGISTRY    = "719725293376.dkr.ecr.af-south-1.amazonaws.com"
        IMAGE       = "test/library_api"
        TAG         =  "${REGISTRY}/${IMAGE}:${VERSION}_${BUILD_NUMBER}"
    }

    stages {



        stage('Build') {
                steps {
                    script {
                        sh "docker build -t ${TAG}_dev -f ${DOCKERFILE} ."
                    }
                }
        }

        stage('Run Unit Tests') {
                steps {
                    script {
                        sh "python3 library-api/test.py"
                    }
                }
        }


        stage("Push to ECR") {
            steps {
                script {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws_credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                            sh "aws ecr get-login-password | docker login --username AWS --password-stdin ${REGISTRY}"
                            sh "docker push ${TAG}_dev"
                        }
                }
            }
        }

        stage("Deploy To Kubernetes") {
            steps {
                script {
                    stage("Deploy") {
                        withCredentials([[$class: 'StringBinding', credentialsId: 'kubeconfig', variable: 'KUBECONFIG']]) {
                            sh "echo \${KUBECONFIG} > kubeconfig.yaml"
                            sh "export KUBECONFIG=kubeconfig.yaml"

                            // Connect to the Kubernetes cluster using kubectl
                            sh "kubectl version"

                            sh "kubectl apply -f deployment.yaml"

                            // Deploy the image using kubectl apply or other desired deployment method
                            // sh "kubectl apply -f your-deployment.yaml"
                        }
                    }
                }
            }
        }


}

}